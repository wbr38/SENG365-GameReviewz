meta {
  name: games id reviews
  type: http
  seq: 2
}

get {
  url: {{BASE_URL}}/games/1/reviews
  body: none
  auth: none
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Expected review data structure", function() {
      try{
          var data = res.getBody()[0];
          expect(data.reviewerId).to.be.a("number");
          expect(data.reviewerFirstName).to.be.a("string");
          expect(data.reviewerLastName).to.be.a("string");
          expect(data.rating).to.be.a("number");
          expect(data.review).to.be.a("string");
          expect(data.timestamp).to.be.a("string");
      } catch(err) {
          expect.fail("INVALID RESPONSE");
      }
  });
  
  var expectedOrdering = [4, 3];
  
  test("Valid ids and ordering", function() {
      try {
          var reviews = res.getBody();
          // console.log(`games [${games.map(p => p.gameId)}]`);
          for (var i = 0; i<expectedOrdering.length; i++){
              if (expectedOrdering[i] !== reviews[i].reviewerId){
                  expect.fail("Invalid ordering of reviews");
                  break;
              }
          }
      } catch (err) {
          expect.fail("Invalid ordering of reviews (ERROR OCCURRED)");
      }
  });
  
  var expectedData =   {
      "reviewerId": 4,
      "reviewerFirstName": "Eleanor",
      "reviewerLastName": "Shellstrop",
      "rating": 7,
      "review": "A bit repetitive but overall a solid game.",
      "timestamp": "2024-11-02T01:22:10.000Z"
    };
  
  test("Valid review data (reviewerId 4)", function() {
      try{
          var review = res.getBody().find(r => r.reviewerId === 4);
          for(const [key, value] of Object.entries(expectedData)) {
              expect(review[key]).to.equal(value);
          }
      } catch (err) {
          console.log(err);
          expect.fail("Incorrect review data");
      }
  });
}
