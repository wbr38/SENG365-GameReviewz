meta {
  name: GET games -many 2-
  type: http
  seq: 40
}

get {
  url: {{BASE_URL}}/games?sortBy=CREATED_DESC&q=the&platformIds=1&platformIds=2&platformIds=3&startIndex=2&count=2
  body: none
  auth: none
}

params:query {
  sortBy: CREATED_DESC
  q: the
  platformIds: 1
  platformIds: 2
  platformIds: 3
  startIndex: 2
  count: 2
}

tests {
  const expectedNumGames = 2;
  const expectedCountGames = 4;
  
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Valid game list length", function() {
      try {
          var data = res.getBody();
          expect(data.games.length).to.equal(expectedNumGames);
      } catch (err) {
          expect.fail(`Incorrect number of games returned expected ${expectedNumGames} got ${res.getBody().games.length}`);
      }
  });
  
  test("Valid game count", function() {
      try {
          var data = res.getBody();
          expect(data.count).to.equal(expectedCountGames);
      } catch (err) {
          expect.fail(`Incorrect games count expected ${expectedCountGames} got ${res.getBody().games.length}`);
      }
  });
  
  var expectedOrdering = [16, 11];
  
  test("Valid ids and ordering", function() {
      try {
          var games = res.getBody().games;
          // console.log(`games [${games.map(p => p.gameId)}]`);
          for (var i = 0; i<expectedOrdering.length; i++){
              if (expectedOrdering[i] !== games[i].gameId){
                  expect.fail("Invalid ordering of games");
                  break;
              }
          }
      } catch (err) {
          expect.fail("Invalid ordering of games (ERROR OCCURRED)");
      }
  })
}
